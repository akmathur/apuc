== AJAX Photo Upload and Crop - a demo application

This application shows you how to implement a photo upload and crop
functionality in your application. For instance, if you want to allow
your users to crop the profile picture after uploading it, this
application shows you how to do it.

The photo upload and crop both actions happen over AJAX - the photo is uploaded
and cropped while the page does not reload.

The application is built using Ruby on Rails and jQuery.

== Installation and Execution

Make sure you have installed the following:
* Ruby
* Rails (> 3.0)
* Rails Paperclip gem to handle file upload
* jQuery (> 1.6.1)
* Jcrop jQuery plugin (from {here}[http://deepliquid.com/content/Jcrop.html])
* ajaxfileupload.js (found {here}[https://gist.github.com/justinethier/2776054] as well as {here}[https://github.com/davgothic/AjaxFileUpload])

Then, download the application, run the rails server and go to localhost:3000.
1. Click on "Create New Profile". Enter a name for the profile also enter dimensions and Save.
   Typically, an application will have a *fixed dimension* for a avatar photo,
   but this sample application shows you the generic technique.
2. Click on the name of the profile you just created
3. Click on "change photo"
4. Select the file and click "Upload"
5. You will see the photo with a cropping rectangle laid over it. Adjust the size and position to choose the portion you want to crop
6. Click "Crop Now"
7. The profile will show the cropped avatar photo

== Understanding the code

The application has a model +Profile+ in which a file attribute called +avatar+ is added using +paperclip+. There are standard model and controller class definitions for +Profile+. See {documentation for Paperclip}[https://github.com/thoughtbot/paperclip] for more details in case you are unfamiliar with it.

Next, you will need cropping related columns in +profiles+ table: +crop_x+, +crop_y+, +crop_w+, +crop_h+, +req_width+ and +req_height+. Along with it, two new actions called +update_photo+ and +crop_canvas+ are required. +update_photo+ saves an uploaded photo via AJAX while +crop_canvas+ presents the photo along with the crop rectangle over it.

The file project.js sets up the AJAX call when the file upload button is clicked.

== Notes

* Adding crop related columns to profile (+crop_x+, +crop_y+, +crop_w+, +crop_h+, +req_width+ and +req_height+) are not strictly required. You could declare them as +attr_accessor+ in the +Profile+ model and that would work just fine. Adding columns to the DB is safer - you can replay the cropping action later if you want for some reason.

* Typically in an application, required width and required height will be hard-coded in the application. e.g. you may want profile pictures to be always 160x160. There is no need to add DB columns req_width and req_height in such cases.
